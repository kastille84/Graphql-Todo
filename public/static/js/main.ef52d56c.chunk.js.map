{"version":3,"sources":["components/AddTodo.js","components/TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","onTodoSubmit","useState","text","setText","errors","setErrors","className","length","map","error","idx","key","style","textAlign","color","htmlFor","placeholder","id","value","onChange","e","target","onClick","preventDefault","newErrors","validate","COMPLETE_TODO","gql","GET_TODOS","DELETE_TODO","TodoItem","todo","Fragment","mutation","completeTodo","loading","data","completed","variables","todoId","_id","update","cache","deleteTodo","todos","readQuery","query","writeQuery","filter","client","ApolloClient","uri","ADD_TODO","App","createTodo","concat","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ef52d56c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"./AddTodo.css\";\r\n\r\nconst AddTodo = ({ onTodoSubmit }) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n\r\n  const validate = text => {\r\n    //reset errors\r\n    setErrors([])\r\n    //validate\r\n    if (text === \"\") {\r\n      const newErrors = [...errors, \"Todo cannot be empty\"];\r\n      setErrors(newErrors);\r\n      return;\r\n    }\r\n    //clear out input\r\n    setText(\"\")\r\n    //call submit handler\r\n    onTodoSubmit(text);\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-todo form-container\">\r\n      <form className=\"form\">\r\n        {errors.length > 0 &&\r\n          errors.map((error, idx) => (\r\n            <p key={idx} style={{ textAlign: \"center\", color:'red' }}>\r\n              {error}\r\n            </p>\r\n          ))}\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"todo_text\">What would you like to do?</label>\r\n          <input\r\n            placeholder=\"i.e. Wash Car or Study for test\"\r\n            id=\"todo_text\"\r\n            value={text}\r\n            onChange={e => setText(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-actions\">\r\n          <button\r\n            className=\"btn\"\r\n            onClick={e => {\r\n              e.preventDefault();\r\n              validate(text);\r\n            }}\r\n          >\r\n            Add Todo\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Mutation } from \"react-apollo\";\r\n\r\nimport \"./TodoItem.css\";\r\n\r\nconst COMPLETE_TODO = gql`\r\n  mutation CompleteTodo($todoId: ID!) {\r\n    completeTodo(todoId: $todoId) {\r\n      _id\r\n      text\r\n      completed\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TODOS = gql`\r\n  query GetTodos {\r\n    todos {\r\n      _id\r\n      text\r\n      completed\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_TODO = gql`\r\n  mutation DeleteTodo($todoId: ID!) {\r\n    deleteTodo(todoId: $todoId) {\r\n      _id\r\n    }\r\n  }\r\n`;\r\n\r\nconst TodoItem = ({ todo }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Mutation mutation={COMPLETE_TODO}>\r\n        {(completeTodo, { loading, error, data }) => {\r\n          return (\r\n            <div className=\"todo-item\">\r\n              <span className=\"todo-item__text\">{todo.text}</span>\r\n              <span>\r\n                <button\r\n                  className={`btn todo-item__completed ${\r\n                    todo.completed ? \"completed\" : \"not-completed\"\r\n                  }`}\r\n                  onClick={() => {\r\n                    completeTodo({ variables: { todoId: todo._id } });\r\n                  }}\r\n                >\r\n                  {todo.completed ? \"Complete\" : \"Not Complete\"}\r\n                </button>\r\n                <React.Fragment>\r\n                  <Mutation\r\n                    mutation={DELETE_TODO}\r\n                    //update query\r\n                    update={(cache, { data: { deleteTodo } }) => {\r\n                      const { todos } = cache.readQuery({ query: GET_TODOS });\r\n                      cache.writeQuery({\r\n                        query: GET_TODOS,\r\n                        data: {\r\n                          todos: todos.filter(\r\n                            todo => todo._id !== deleteTodo._id\r\n                          )\r\n                        }\r\n                      });\r\n                    }}\r\n                  >\r\n                    {(deleteTodo, { loading, error, data }) => {\r\n                      return (\r\n                        <button\r\n                          className=\"todo-item__close\"\r\n                          onClick={() =>\r\n                            deleteTodo({ variables: { todoId: todo._id } })\r\n                          }\r\n                        >\r\n                          X\r\n                        </button>\r\n                      );\r\n                    }}\r\n                  </Mutation>\r\n                </React.Fragment>\r\n              </span>\r\n            </div>\r\n          );\r\n        }}\r\n      </Mutation>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, {Component} from 'react';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {Mutation, Query} from 'react-apollo';\nimport './App.css';\nimport AddTodo from './components/AddTodo';\nimport TodoItem from './components/TodoItem';\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\n\nconst ADD_TODO = gql`\n  mutation AddTodo($text: String!) {\n    createTodo(text: $text) {\n      _id\n      text\n      completed\n    }\n  }\n`\nconst GET_TODOS = gql`\n  query GetTodos {\n    todos {\n      _id\n      text\n      completed\n    }\n  }\n`\nclass App extends Component {\n\n\n  render() {\n    return (\n      <ApolloProvider client={client}>      \n        <div className=\"App\">\n          <header className=\"App__title\">\n            <h1>Todos App</h1>\n            <p>Organization at your fingertips</p>\n          </header>\n          {/* Add Todo*/}\n          <Mutation \n            mutation={ADD_TODO}\n            //update query\n            update={(cache, {data: {createTodo}}) => {\n              const {todos} = cache.readQuery({query: GET_TODOS});\n              cache.writeQuery({\n                query: GET_TODOS,\n                data: {todos: todos.concat([createTodo])}\n              });\n            }}\n          >\n            {(createTodo, {loading, error, data}) => {\n              console.log('data',data);\n              return <AddTodo \n                onTodoSubmit={(text)=>{\n                  createTodo({variables:{text:text}});\n                }}\n              />\n\n            }}\n          </Mutation>\n          {/* Todos List*/}\n          <section className=\"todos__list\">\n            <Query query={GET_TODOS}>\n              {({loading, error, data})=> {\n                if(loading) return <h4>Loading...</h4>;\n                if(error) console.log(error);\n\n                return <React.Fragment>\n                  {\n                    (data.todos.length ===0)? \n                    <p style={{textAlign: 'center'}}>No Todos. Please Add a todo</p>\n                    :\n                    data.todos.map(todo => {\n                    return <TodoItem key={todo._id} todo={todo} />\n                  })\n                }\n                </React.Fragment>;\n              }}\n            </Query>\n          </section>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}